package dao.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import dao.Test;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEST".
*/
public class TestDao extends AbstractDao<Test, Void> {

    public static final String TABLENAME = "TEST";

    /**
     * Properties of entity Test.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SysMenuID = new Property(0, int.class, "SysMenuID", false, "SYS_MENU_ID");
        public final static Property SysMenuName = new Property(1, String.class, "SysMenuName", false, "SYS_MENU_NAME");
        public final static Property SysMenuNum = new Property(2, int.class, "SysMenuNum", false, "SYS_MENU_NUM");
        public final static Property SysMenuStr = new Property(3, String.class, "SysMenuStr", false, "SYS_MENU_STR");
        public final static Property SysPID = new Property(4, int.class, "SysPID", false, "SYS_PID");
        public final static Property SortNum = new Property(5, int.class, "SortNum", false, "SORT_NUM");
        public final static Property IsMenu = new Property(6, int.class, "IsMenu", false, "IS_MENU");
        public final static Property MainID = new Property(7, int.class, "MainID", false, "MAIN_ID");
        public final static Property SysPStr = new Property(8, String.class, "SysPStr", false, "SYS_PSTR");
        public final static Property SysMenuImage = new Property(9, String.class, "SysMenuImage", false, "SYS_MENU_IMAGE");
    }


    public TestDao(DaoConfig config) {
        super(config);
    }
    
    public TestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEST\" (" + //
                "\"SYS_MENU_ID\" INTEGER NOT NULL ," + // 0: SysMenuID
                "\"SYS_MENU_NAME\" TEXT," + // 1: SysMenuName
                "\"SYS_MENU_NUM\" INTEGER NOT NULL ," + // 2: SysMenuNum
                "\"SYS_MENU_STR\" TEXT," + // 3: SysMenuStr
                "\"SYS_PID\" INTEGER NOT NULL ," + // 4: SysPID
                "\"SORT_NUM\" INTEGER NOT NULL ," + // 5: SortNum
                "\"IS_MENU\" INTEGER NOT NULL ," + // 6: IsMenu
                "\"MAIN_ID\" INTEGER NOT NULL ," + // 7: MainID
                "\"SYS_PSTR\" TEXT," + // 8: SysPStr
                "\"SYS_MENU_IMAGE\" TEXT);"); // 9: SysMenuImage
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Test entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSysMenuID());
 
        String SysMenuName = entity.getSysMenuName();
        if (SysMenuName != null) {
            stmt.bindString(2, SysMenuName);
        }
        stmt.bindLong(3, entity.getSysMenuNum());
 
        String SysMenuStr = entity.getSysMenuStr();
        if (SysMenuStr != null) {
            stmt.bindString(4, SysMenuStr);
        }
        stmt.bindLong(5, entity.getSysPID());
        stmt.bindLong(6, entity.getSortNum());
        stmt.bindLong(7, entity.getIsMenu());
        stmt.bindLong(8, entity.getMainID());
 
        String SysPStr = entity.getSysPStr();
        if (SysPStr != null) {
            stmt.bindString(9, SysPStr);
        }
 
        String SysMenuImage = entity.getSysMenuImage();
        if (SysMenuImage != null) {
            stmt.bindString(10, SysMenuImage);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Test entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSysMenuID());
 
        String SysMenuName = entity.getSysMenuName();
        if (SysMenuName != null) {
            stmt.bindString(2, SysMenuName);
        }
        stmt.bindLong(3, entity.getSysMenuNum());
 
        String SysMenuStr = entity.getSysMenuStr();
        if (SysMenuStr != null) {
            stmt.bindString(4, SysMenuStr);
        }
        stmt.bindLong(5, entity.getSysPID());
        stmt.bindLong(6, entity.getSortNum());
        stmt.bindLong(7, entity.getIsMenu());
        stmt.bindLong(8, entity.getMainID());
 
        String SysPStr = entity.getSysPStr();
        if (SysPStr != null) {
            stmt.bindString(9, SysPStr);
        }
 
        String SysMenuImage = entity.getSysMenuImage();
        if (SysMenuImage != null) {
            stmt.bindString(10, SysMenuImage);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Test readEntity(Cursor cursor, int offset) {
        Test entity = new Test( //
            cursor.getInt(offset + 0), // SysMenuID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // SysMenuName
            cursor.getInt(offset + 2), // SysMenuNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SysMenuStr
            cursor.getInt(offset + 4), // SysPID
            cursor.getInt(offset + 5), // SortNum
            cursor.getInt(offset + 6), // IsMenu
            cursor.getInt(offset + 7), // MainID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // SysPStr
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // SysMenuImage
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Test entity, int offset) {
        entity.setSysMenuID(cursor.getInt(offset + 0));
        entity.setSysMenuName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSysMenuNum(cursor.getInt(offset + 2));
        entity.setSysMenuStr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSysPID(cursor.getInt(offset + 4));
        entity.setSortNum(cursor.getInt(offset + 5));
        entity.setIsMenu(cursor.getInt(offset + 6));
        entity.setMainID(cursor.getInt(offset + 7));
        entity.setSysPStr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSysMenuImage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Test entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Test entity) {
        return null;
    }

    @Override
    public boolean hasKey(Test entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
